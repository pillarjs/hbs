name: ci

on:
- pull_request
- push

permissions:
  contents: read

jobs:
  test:
    permissions:
      checks: write  # for coverallsapp/github-action to create new checks
      contents: read  # for actions/checkout to fetch code
    runs-on: ubuntu-latest
    strategy:
      matrix:
        name:
        - Node.js 0.8
        - Node.js 0.10
        - Node.js 4.x
        - Node.js 6.x
        - Node.js 8.x
        - Node.js 10.x
        - Node.js 12.x
        - Node.js 14.x
        - Node.js 16.x

        include:
        - name: Node.js 0.8
          node-version: "0.8"
          npm-i: mocha@2.5.3 supertest@1.1.0
          npm-rm: nyc

        - name: Node.js 0.10
          node-version: "0.10"
          npm-i: mocha@3.5.3 supertest@2.0.0
          npm-rm: nyc

        - name: Node.js 4.x
          node-version: "4.9"
          npm-i: mocha@5.2.0 supertest@3.4.2
          npm-rm: nyc

        - name: Node.js 6.x
          node-version: "6.17"
          npm-i: mocha@6.2.2
          npm-rm: nyc

        - name: Node.js 8.x
          node-version: "8.17"
          npm-i: mocha@7.2.0 nyc@13.3.0

        - name: Node.js 10.x
          node-version: "10.24"
          npm-i: mocha@8.3.2

        - name: Node.js 12.x
          node-version: "12.22"

        - name: Node.js 14.x
          node-version: "14.18"

        - name: Node.js 16.x
          node-version: "16.13"

    steps:
    - uses: actions/checkout@v2

    - name: Install Node.js ${{ matrix.node-version }}
      shell: bash -eo pipefail -l {0}
      run: |
        nvm install --default ${{ matrix.node-version }}
        if [[ "${{ matrix.node-version }}" == 0.* && "$(cut -d. -f2 <<< "${{ matrix.node-version }}")" -lt 10 ]]; then
          nvm install --alias=npm 0.10
          npm install -g npm@1.2.8000
          NPM=$(which npm)
          nvm use ${{ matrix.node-version }}
          ln -fs "$NPM" "$(which npm)"
          sed -i '1s;^.*$;'"$(printf '#!%q' "$(nvm which npm)")"';' "$(readlink -f "$(which npm)")"
        fi
        dirname "$(nvm which ${{ matrix.node-version }})" >> "$GITHUB_PATH"

    - name: Configure npm
      run: npm config set shrinkwrap false

    - name: Remove npm module(s) ${{ matrix.npm-rm }}
      run: npm rm --silent --save-dev ${{ matrix.npm-rm }}
      if: matrix.npm-rm != ''

    - name: Install npm module(s) ${{ matrix.npm-i }}
      run: npm install --save-dev ${{ matrix.npm-i }}
      if: matrix.npm-i != ''

    - name: Setup Node.js version-specific dependencies
      shell: bash
      run: |
        # eslint for linting
        # - remove on Node.js < 10
        if [[ "$(cut -d. -f1 <<< "${{ matrix.node-version }}")" -lt 10 ]]; then
          node -pe 'Object.keys(require("./package").devDependencies).join("\n")' | \
            grep -E '^eslint(-|$)' | \
            sort -r | \
            xargs -n1 npm rm --silent --save-dev
        fi

    - name: Install Node.js dependencies
      run: npm install

    - name: List environment
      id: list_env
      shell: bash
      run: |
        echo "node@$(node -v)"
        echo "npm@$(npm -v)"
        npm -s ls ||:
        (npm -s ls --depth=0 ||:) | awk -F'[ @]' 'NR>1 && $2 { print "::set-output name=" $2 "::" $3 }'

    - name: Run tests
      shell: bash
      run: |
        if npm -ps ls nyc | grep -q nyc; then
          npm run test-ci
        else
          npm test
        fi

    - name: Lint code
      if: steps.list_env.outputs.eslint != ''
      run: npm run lint

    - name: Collect code coverage
      uses: coverallsapp/github-action@master
      if: steps.list_env.outputs.nyc != ''
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        flag-name: run-${{ matrix.test_number }}
        parallel: true

  coverage:
    permissions:
      checks: write  # for coverallsapp/github-action to create new checks
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Uploade code coverage
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.github_token }}
        parallel-finished: true
